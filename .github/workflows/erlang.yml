name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  linux:
    runs-on: ubuntu-latest
    name: OTP ${{ matrix.otp }} ${{ matrix.os }}.${{ matrix.compiler.compiler }}

    container:
      image: erlang:${{matrix.otp}}

    strategy:
      matrix:
        os: [ linux ]
        compiler:
          - { compiler: GNU-12,  CC: gcc-12,   CXX: g++-12 }
          - { compiler: GNU-11,  CC: gcc-11,   CXX: g++-11 }
          - { compiler: LLVM-12, CC: clang-12, CXX: clang++-12 }
          - { compiler: LLVM-11, CC: clang-11, CXX: clang++-11 }
        otp: [25, 26]

    steps:
      - uses: actions/checkout@v2
      - name: OTP Version
        run:  erl -eval '{ok, Version} = file:read_file(filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])), io:format("Version=~s\n", [Version]), halt().' -noshell -noinput;
      - name: Fix Ownership
        run:  git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - name: Build
        run:  |
          make info
          make
      - name: Test
        run:  |
          adduser --disabled-password --gecos '' newuser
          chown -R newuser:newuser .
          su -c "make test" newuser

#  macOS:
#    name: OTP ${{ matrix.otp }} ${{ matrix.os }}.${{ matrix.compiler.compiler }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ macos-latest ]
#        compiler:
#          - { compiler: XCode, CC: cc, CXX: c++ }
#        otp: [25]
#    steps:
#      - uses: actions/checkout@v2
#      - name: Install Base Dependencies
#        run: |
#          brew update > /dev/null || true
#          brew tap Homebrew/bundle
#          brew install erlang
#          brew install rebar3
#          #brew bundle --verbose
#      - name: Fix Ownership
#        run:  git config --global --add safe.directory ${GITHUB_WORKSPACE}
#      - name: Build
#        env:
#          CC: ${{ matrix.compiler.CC }}
#          CXX: ${{ matrix.compiler.CXX }}
#          SRC_DIR: ${{ github.workspace }}
#          BUILD_DIR: ${{ github.workspace }}/build
#          INSTALL_PREFIX: ${{ github.workspace }}/install
#        run: erl -eval '{ok, Version} = file:read_file(filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])), io:format("Version=~s\n", [Version]), halt().' -noshell -noinput
#      - name: Build
#        run:  make
#      - name: Test
#        run:  make test

#  windows-msys2:
#    name: OTP ${{ matrix.otp }} ${{ matrix.os }}.${{ matrix.msys2.msystem }}.${{ matrix.compiler.compiler }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ windows-latest ]
#        msys2:
#          - { msystem: MINGW64, arch: x86_64 }
#        compiler:
#          - { compiler: GNU,  CC: gcc,   CXX: g++ }
#          - { compiler: LLVM, CC: clang, CXX: clang++ }
#        otp: ["24.1", "24.2"]
#    defaults:
#      run:
#        shell: msys2 {0}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: msys2/setup-msys2@v2
#        with:
#          msystem: ${{ matrix.msys2.msystem }}
#          install: |
#            pacman -Ss bash curl git base-devel mingw-w64-${{ matrix.msys2.arch }}-toolchain mingw-w64-${{ matrix.msys2.arch }}-gcc mingw-w64-${{ matrix.msys2.arch }}-clang mingw-w64-${{ matrix.msys2.arch }}-cmake mingw-w64-${{ matrix.msys2.arch }}-ninja mingw-w64-${{ matrix.msys2.arch }}-zlib erlang rebar3
#          update: true
#      - name: Build And Test
#        env:
#          CC: ${{ matrix.compiler.CC }}
#          CXX: ${{ matrix.compiler.CXX }}
#          SRC_DIR: ${{ github.workspace }}
#          BUILD_DIR: ${{ github.workspace }}/build
#          INSTALL_PREFIX: ${{ github.workspace }}/install
#        run: |
#          erl -eval '{ok, Version} = file:read_file(filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])), io:format("Version=~s\n", [Version]), halt().' -noshell;
#          make
#
